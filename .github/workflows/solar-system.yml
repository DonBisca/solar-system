name: Solar System Workflow

on:
    workflow_dispatch: 
    push: 
        branches: 
            - main
            - 'feature/*'
env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets. MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        # este service container se usa para que se conecte a una base de datos alojada en un contenedor que se usara para pruebas en vez de a una que este alojada en un ambiente productivo
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
            nodejs_version: [18, 20]
            operating_system: [ubuntu-latest]
            exclude:
                - nodejs_version: 18
                  operating_system: macos-latest
        runs-on: ${{ matrix.operating_system }}
        
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            
            - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
              uses: actions/setup-node@v4
              with:
                node-version: ${{ matrix.nodejs_version }}
            
            - name: Cache NPM Dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                # sele da un nombre unico a la key de estos ficheros en cahe haciendo un hash del fichero package-lock.json, cualquier cambio que reciba este fichero
                # que se genere un nuevo valor y cambie la cache por la nueva que se genere
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

            - name: Install Dependencies
              run: npm install
            
            - name: Unit Testing
              id: nodejs-unit-testing-step
              run: npm test

            - name: Archive Test Result for ${{ matrix.operating_system}} and Node ${{ matrix.nodejs_version }} 
              if: always()
              uses: actions/upload-artifact@v4
              with:
                #si no se varian los nombres de los ficheros de artefactos que se generan da error por conflictos de no poder guardar un fichero con el mismo nombre en la misma ruta
                name: Mocha-Test-Result-${{ matrix.operating_system }}-${{ matrix.nodejs_version }}
                path: test-results.xml

    code-coverage:
        name: Code Coverage
        container: 
            image: node:18
        services:
            mongo-db:
                image: siddharth67/mongo-db:non-prod
                options: 
                    --name mongo 
        env:
            # ahora la ruta de conexion cambio pq ambos contenedores estan en la misma red bridge y se conectan [nombre]:[puerto]
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

        # si se usan job containers con una imagen de node:18 ya no es necesario instalar node 18
        #   - name: Setup NodeJS Version - 18
        #     uses: actions/setup-node@v4
        #     with:
        #         node-version: 18

          - name: Cache NPM Dependencies
            uses: actions/cache@v4
            with:
                path: node_modules
                # sele da un nombre unico a la key de estos ficheros en cahe haciendo un hash del fichero package-lock.json, cualquier cambio que reciba este fichero
                # que se genere un nuevo valor y cambie la cache por la nueva que se genere
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

          - name: Install Dependencies
            run: npm install

          - name: Check Code Coverage
            continue-on-error: true
            run: npm run coverage
            
          - name: Archive Test Result
            uses: actions/upload-artifact@v4
            with:
                name: Code-Coverage-Result
                path: coverage
                retention-days: 5
                
    docker:
        name: Containerization
        needs: [code-coverage, unit-testing]
        permissions: 
            packages: write
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Dockerhub Login
              uses: docker/login-action@v3
              with:
                username: ${{ vars.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}

            - name: GHCR Login
              uses: docker/login-action@v3
              with:
                registry: ghcr.io
                # el usuario se recupera del contexto de github
                username: donbisca
                # username: ${{ github.repository_owner }}
                # el token de github en este caso no hace falta crearlo como un secreto, se genera automaticamente
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Docker Build for Testing             
              uses: docker/build-push-action@v6
              with:
                # ruta donde se tiene el Dockerfile
                context: .
                push: false
                # se genera una version nueva basada en el sha del commit
                tags: 
                    ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

            - name: Docker Image Test
              run: |
                docker images
                docker run --name solar-system-app -d \
                    -p 3000:3000 \
                    -e MONGO_URI=$MONGO_URI \
                    -e MONGO_USERNAME=$MONGO_USERNAME \
                    -e MONGO_PASSWORD=$MONGO_PASSWORD \
                    ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
                export IP=$(docker inspect -f '{{ range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
                echo $IP
                sleep 2
                docker ps
                docker logs solar-system-app

                echo Testing Image URL using wget
                wget -q -O - 127.0.0.1:3000/live | grep live

            # - name: Docker Push          
            #   uses: docker/build-push-action@v6
            #   with:
            #     # ruta donde se tiene el Dockerfile
            #     context: .
            #     push: true
            #     # se genera una version nueva basada en el sha del commit
            #     tags: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
            
            # ahora se va a hacer el push a Docker hub y GHCR
            - name: Container Registry Push          
              uses: docker/build-push-action@v6
              with:
                # ruta donde se tiene el Dockerfile
                context: .
                push: true
                # se genera una version nueva basada en el sha del commit
                tags: |
                    ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
                    ghcr.io/donbisca/solar-system:${{ github.sha }}
                    
    # dev-deploy:
    #   needs: docker
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Checkout Repo
    #       uses: actions/checkout@v4
        
    #     - name: Install kubectl CLI
    #       uses: azure/setup-kubectl@v4
    #       with:
    #        version: 'v1.26.0'

    #     - name: Set KubeConfig
    #       uses: azure/k8s-set-context@v4
    #       with:
    #         method: kubeconfig
    #         # aqui va un fichero kubeconfig de nuestro cluster
    #         kubeconfig: ${{ secrets.KUBECONFIG}}
    #         # aqui va el nombre del cluster al que deseamos conectarnos en caso de que en nuestro kubeconfig haya mas de uno
    #         context: [context]

    #     - name: Fetch Kubernetes Cluster Details
    #       run: |
    #         kubectl version --short
    #         echo --------------------------------------
    #         kubectl get nodes -o wide